import{_ as o,Y as t,Z as p,a1 as n,a2 as s,a0 as e,$ as c,G as l}from"./framework-ae46ee38.js";const i={},r=n("h1",{id:"重写-override-equals和hashcode方法时应考虑的问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#重写-override-equals和hashcode方法时应考虑的问题","aria-hidden":"true"},"#"),s(" 重写（Override）equals和hashCode方法时应考虑的问题")],-1),u=n("h3",{id:"理论上讲-编程语言、数学层面",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#理论上讲-编程语言、数学层面","aria-hidden":"true"},"#"),s(" 理论上讲（编程语言、数学层面）")],-1),d={href:"http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#equals(java.lang.Object)",target:"_blank",rel:"noopener noreferrer"},k={href:"http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode()",target:"_blank",rel:"noopener noreferrer"},h=n("p",null,"总的来说，这两个方法的关系：",-1),v=n("p",null,[n("strong",null,"假如a.equals(b)，那么a.hashCode() 应等于b.hashCode()")],-1),m=n("h3",{id:"实践上讲",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#实践上讲","aria-hidden":"true"},"#"),s(" 实践上讲")],-1),b=n("p",null,[n("strong",null,"如果你重写了其中一个方法，那么务必重写另外一个方法")],-1),_=n("p",null,"equals()和hashCode()所计算的属性集（set of fields）应当是一样的 如何更快地重写这两个方法呢？",-1),f={href:"http://commons.apache.org/lang/",target:"_blank",rel:"noopener noreferrer"},g={href:"http://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/builder/EqualsBuilder.html",target:"_blank",rel:"noopener noreferrer"},w={href:"http://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/builder/HashCodeBuilder.html",target:"_blank",rel:"noopener noreferrer"},q=c(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token comment">// ...</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HashCodeBuilder</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token comment">// two randomly chosen prime numbers</span>
            <span class="token comment">// if deriving: appendSuper(super.hashCode()).</span>
            <span class="token function">append</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>
            <span class="token function">append</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">.</span>
            <span class="token function">toHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

        <span class="token class-name">Person</span> rhs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">EqualsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
            <span class="token comment">// if deriving: appendSuper(super.equals(obj)).</span>
            <span class="token function">append</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> rhs<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>
            <span class="token function">append</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span> rhs<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">.</span>
            <span class="token function">isEquals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>如果你是用eclipse，可以在代码编辑区右键，然后选择 Source &gt; Generate hashCode() and equals()</li></ol><p><strong>另外请记得</strong></p><p>当你使用一些基于Hash的 Collection 、 Map，例如HashSet, LinkedHashSet, HashMap, Hashtable, 、WeakHashMap等。在键值对被放到集合中之后，请确保其key值所对应的hashCode()是保持不变的。比较可靠的一个办法，是保持这些key是不可变的，这也能带来不少好处</p>`,4),y={href:"http://stackoverflow.com/questions/27581/what-issues-should-be-considered-when-overriding-equals-and-hashcode-in-java",target:"_blank",rel:"noopener noreferrer"};function j(C,H){const a=l("ExternalLinkIcon");return t(),p("div",null,[r,u,n("p",null,[s("equals() 定义了对象的相等关系（自反性、对称性、传递性）（有点抽象，更详细说明，请参考"),n("a",d,[s("javadoc"),e(a)]),s(") 。 另外，它还具有一致性（也就是说，如果一个对象没有修改，那么对象的equals方法，应总是返回相同的值），此外，o.equals(null)应当总是返回false。 hashCode()（"),n("a",k,[s("javadoc"),e(a)]),s(")也必须具备一致性的（也就是说，如果equal的结果没有变，那么hashcode()也应总是返回相同的值）")]),h,v,m,b,_,n("ol",null,[n("li",null,[s("使用"),n("a",f,[s("Apache Commons Lang library"),e(a)]),s("中的"),n("a",g,[s("EqualsBuilder"),e(a)]),s("、"),n("a",w,[s("HashCodeBuilder"),e(a)])])]),q,n("p",null,[s("stackoverflow链接： "),n("a",y,[s("http://stackoverflow.com/questions/27581/what-issues-should-be-considered-when-overriding-equals-and-hashcode-in-java"),e(a)])])])}const B=o(i,[["render",j],["__file","what-issues-should-be-considered-when-overriding-equals-and-hashcode-in-java.html.vue"]]);export{B as default};

import{_ as t,Y as e,Z as p,a1 as n,a2 as a,a0 as o,$ as c,G as i}from"./framework-ae46ee38.js";const l={},r=c(`<h1 id="将inputstream转换为string" tabindex="-1"><a class="header-anchor" href="#将inputstream转换为string" aria-hidden="true">#</a> 将InputStream转换为String</h1><h3 id="使用apache库" tabindex="-1"><a class="header-anchor" href="#使用apache库" aria-hidden="true">#</a> 使用Apache库</h3><p>不重复造轮子。最靠谱的方法，还是用Apache commons IOUtils 这样简单几行代码就搞定了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">StringWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> writer<span class="token punctuation">,</span> encoding<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> theString <span class="token operator">=</span> writer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> theString <span class="token operator">=</span> <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> encoding<span class="token punctuation">)</span><span class="token comment">//这个方法其实封装了上面的方法，减少了一个参数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="使用原生库" tabindex="-1"><a class="header-anchor" href="#使用原生库" aria-hidden="true">#</a> 使用原生库</h3><p>如果不想引入Apache库，也可以这样做</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">convertStreamToString</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>InputStream</span> is<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Scanner</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Scanner</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">useDelimiter</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> s<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),u={href:"http://stackoverflow.com/questions/309424/read-convert-an-inputstream-to-a-string",target:"_blank",rel:"noopener noreferrer"};function k(d,m){const s=i("ExternalLinkIcon");return e(),p("div",null,[r,n("p",null,[a("stackoverflow讨论地址 "),n("a",u,[a("http://stackoverflow.com/questions/309424/read-convert-an-inputstream-to-a-string"),o(s)])])])}const h=t(l,[["render",k],["__file","read-convert-an-inputstream-to-a-string.html.vue"]]);export{h as default};

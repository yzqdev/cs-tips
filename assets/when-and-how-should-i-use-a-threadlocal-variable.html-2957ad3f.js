import{_ as t,Y as o,Z as l,a1 as n,a2 as a,a0 as e,$ as c,G as p}from"./framework-ae46ee38.js";const r={},i=c(`<h1 id="该什么时候使用-threadlocal变量-它是如何工作的" tabindex="-1"><a class="header-anchor" href="#该什么时候使用-threadlocal变量-它是如何工作的" aria-hidden="true">#</a> 该什么时候使用 ThreadLocal变量，它是如何工作的？</h1><h3 id="回答1" tabindex="-1"><a class="header-anchor" href="#回答1" aria-hidden="true">#</a> 回答1</h3><p>一种可能的（也是常见的）使用情形是你不想通过同步方式（synchronized）访问非线程安全的对象（说的就是SimpleDateFormat）,而是想给每个线程一个对象实例的时候。 例如</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span>
<span class="token punctuation">{</span>
    <span class="token comment">// SimpleDateFormat is not thread-safe, so give one to each thread</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">&gt;</span></span> formatter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> <span class="token class-name">SimpleDateFormat</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyyMMdd HHmm&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">formatIt</span><span class="token punctuation">(</span><span class="token class-name">Date</span> date<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> formatter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="回答2" tabindex="-1"><a class="header-anchor" href="#回答2" aria-hidden="true">#</a> 回答2</h3><p>因为ThreadLocal是一个既定线程内部的数据引用，你可能在使用线程池的应用服务器上因此引起类加载时候的内存泄漏。你需要使用remove()方法很小心地清理TheadLocal中get()或者set()的变量。 如果程序执行完毕没有清理的话，它持有的任何对类的引用将作为部署的Web应用程序的一部分仍保持在永久堆，永远无法得到回收。重新部署/取消部署也无法清理对应用程序类的引用，因为线程不是被你的应用程序所拥有的。 每次成功部署都会创建一个永远不会被垃圾回收类的实例。</p>`,6),d={href:"http://www.eclipse.org/mat/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://blogs.oracle.com/fkieviet/entry/classloader_leaks_the_dreaded_java",target:"_blank",rel:"noopener noreferrer"},k={href:"https://blogs.oracle.com/fkieviet/entry/how_to_fix_the_dreaded",target:"_blank",rel:"noopener noreferrer"},h={href:"http://avasseur.blogspot.jp/2003/11/threadlocal-and-memory-leaks.html",target:"_blank",rel:"noopener noreferrer"},m={href:"http://stackoverflow.com/questions/817856/when-and-how-should-i-use-a-threadlocal-variable",target:"_blank",rel:"noopener noreferrer"};function v(_,b){const s=p("ExternalLinkIcon");return o(),l("div",null,[i,n("p",null,[a("最后将会遇到内存不足的异常-java.lang.java.lang.OutOfMemoryError: PermGen space -XX:MaxPermSize，在google了很多答案之后你可能只是增加了-XX:MaxPermSize，而不是修复这个bug。 倘若你的确遇到这种问题，可以通过"),n("a",d,[a("Eclipse's Memory Analyzer"),e(s)]),a("或根据"),n("a",u,[a("Frank Kieviet's guide"),e(s)]),a(" 和 "),n("a",k,[a("followup"),e(s)]),a("来判断哪些线程和类保留了那些引用。")]),n("p",null,[a("更新：又发现了"),n("a",h,[a("Alex Vasseur's blog entry"),e(s)]),a("，它帮助我查清楚了一些ThreadLocal的问题。")]),n("p",null,[a("stackoverflow链接："),n("a",m,[a("http://stackoverflow.com/questions/817856/when-and-how-should-i-use-a-threadlocal-variable"),e(s)])])])}const g=t(r,[["render",v],["__file","when-and-how-should-i-use-a-threadlocal-variable.html.vue"]]);export{g as default};

import{_ as e,Y as t,Z as p,a1 as n,a2 as a,a0 as o,$ as c,G as l}from"./framework-ae46ee38.js";const i={},u=c(`<h1 id="比较java枚举成员使用equal还是" tabindex="-1"><a class="header-anchor" href="#比较java枚举成员使用equal还是" aria-hidden="true">#</a> 比较java枚举成员使用equal还是==</h1><h3 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h3><p>我知道Java枚举会被编译成一个包含私有构造参数和一堆静态方法的类，当去比较两个枚举的时候，总是使用equals()方法，例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token function">useEnums</span><span class="token punctuation">(</span><span class="token class-name">SomeEnum</span> a<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">SomeEnum</span><span class="token punctuation">.</span><span class="token constant">SOME_ENUM_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外，我也可以使用 == 替代equals() 方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token function">useEnums2</span><span class="token punctuation">(</span><span class="token class-name">SomeEnum</span> a<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token class-name">SomeEnum</span><span class="token punctuation">.</span><span class="token constant">SOME_ENUM_VALUE</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我有5年以上的java编程经验，并且我想我也懂得 == 和 equals() 之间的区别，但是我仍然觉得很困惑，哪一个操作符才是我该使用的。</p><h3 id="答案" tabindex="-1"><a class="header-anchor" href="#答案" aria-hidden="true">#</a> 答案</h3><p>二者皆对，如果你看过枚举的源码，你会发现在源码中，equals也仅仅非常简单的 == 。 我使用 == ，因为无论如何，这个左值是可以为 null的</p><p>译者补充 java.lang.Enum 中Equals 代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">==</span>other<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="额外答案" tabindex="-1"><a class="header-anchor" href="#额外答案" aria-hidden="true">#</a> 额外答案</h3><h4 id="能在枚举中使用-进行判断" tabindex="-1"><a class="header-anchor" href="#能在枚举中使用-进行判断" aria-hidden="true">#</a> 能在枚举中使用 == 进行判断？</h4><p>答案是肯定的，因为枚举有着严格的实例化控制，所以你可以用 == 去做比较符，这个用法，在官方文档中也有明确的说明。</p><blockquote><p>JLS 8.9 Enums 一个枚举类型除了定义的那些枚举常量外没有其他实例了。 试图明确地说明一种枚举类型是会导致编译期异常。在枚举中final clone方法确保枚举常量从不会被克隆，而且序列化机制会确保从不会因为反序列化而创造复制的实例。枚举类型的反射实例化也是被禁止的。总之，以上内容确保了除了定义的枚举常量之外，没有枚举类型实例。</p></blockquote><p>因为每个枚举常量只有一个实例，所以如果在比较两个参考值，至少有一个涉及到枚举常量时，允许使用“==”代替equals()。（equals()方法在枚举类中是一个final方法，在参数和返回结果时，很少调用父类的equals()方法，因此是一种恒等的比较。）</p><h4 id="什么时候-和-equals-不一样" tabindex="-1"><a class="header-anchor" href="#什么时候-和-equals-不一样" aria-hidden="true">#</a> 什么时候 == 和 equals 不一样？</h4><p>As a reminder, it needs to be said that generally, == is NOT a viable alternative to equals. When it is, however (such as with enum), there are two important differences to consider: 通常来说 == 不是一个 equals的一个备选方案，无论如何有2个重要的不同处需要考虑：</p><h5 id="不会抛出-nullpointerexception" tabindex="-1"><a class="header-anchor" href="#不会抛出-nullpointerexception" aria-hidden="true">#</a> == 不会抛出 NullPointerException</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span> <span class="token constant">BLACK</span><span class="token punctuation">,</span> <span class="token constant">WHITE</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name">Color</span> nothing <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>nothing <span class="token operator">==</span> <span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">BLACK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// runs fine</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>nothing<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">BLACK</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// throws NullPointerException</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="在编译期检测类型兼容性" tabindex="-1"><a class="header-anchor" href="#在编译期检测类型兼容性" aria-hidden="true">#</a> == 在编译期检测类型兼容性</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span> <span class="token constant">BLACK</span><span class="token punctuation">,</span> <span class="token constant">WHITE</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">enum</span> <span class="token class-name">Chiral</span> <span class="token punctuation">{</span> <span class="token constant">LEFT</span><span class="token punctuation">,</span> <span class="token constant">RIGHT</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">BLACK</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Chiral</span><span class="token punctuation">.</span><span class="token constant">LEFT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// compiles fine</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">BLACK</span> <span class="token operator">==</span> <span class="token class-name">Chiral</span><span class="token punctuation">.</span><span class="token constant">LEFT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// DOESN&#39;T COMPILE!!! Incompatible types!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="什么时候使用" tabindex="-1"><a class="header-anchor" href="#什么时候使用" aria-hidden="true">#</a> 什么时候使用 == ？</h4><p>Bloch specifically mentions that immutable classes that have proper control over their instances can guarantee to their clients that == is usable. enum is specifically mentioned to exemplify. 具体来说，那些提供恰当实例控制的不可变类能够保证 == 是可用的，枚举刚好符合这个条件。</p><p>考虑静态工厂方法代替构造器 它使得不可变的类可以确保不会存在两个相等的实例，即当且仅当a<mark>b的时候才有a.equals(b)为true。如果类保证了这一点，它的客户端可以使用“</mark>”操作符来代替equals（Object）方法，这样可以提升性能。枚举类型保证了这一点</p><p>总而言之，在枚举比较上使用 == ， 因为：</p><ol><li>能正常工作</li><li>更快</li><li>运行时是安全的</li><li>编译期也是安全的</li></ol>`,27),r={href:"http://stackoverflow.com/questions/1750435/comparing-java-enum-members-or-equals",target:"_blank",rel:"noopener noreferrer"};function d(k,m){const s=l("ExternalLinkIcon");return t(),p("div",null,[u,n("p",null,[a("stackoverlfow链接："),n("a",r,[a("http://stackoverflow.com/questions/1750435/comparing-java-enum-members-or-equals"),o(s)])])])}const h=e(i,[["render",d],["__file","comparing-java-enum-members-or-equals.html.vue"]]);export{h as default};

import{_ as p,Y as o,Z as c,a1 as s,a2 as n,a0 as t,$ as e,G as l}from"./framework-ae46ee38.js";const u={},i=e(`<h1 id="如何使用java-net-urlconnection接收及发送http请求" tabindex="-1"><a class="header-anchor" href="#如何使用java-net-urlconnection接收及发送http请求" aria-hidden="true">#</a> 如何使用java.net.URLConnection接收及发送HTTP请求</h1><p>首先声明，下面的代码，都是基本的例子。更严谨的话，还应加入处理各种异常的代码(如IOExceptions、NullPointerException、ArrayIndexOutOfBoundsException)</p><h3 id="准备" tabindex="-1"><a class="header-anchor" href="#准备" aria-hidden="true">#</a> 准备</h3><p>首先，需要设置请求的URL以及charset(编码)；额外的参数，则取决于各自url的要求。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;http://example.com&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> charset <span class="token operator">=</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> param1 <span class="token operator">=</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> param2 <span class="token operator">=</span> <span class="token string">&quot;value2&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
<span class="token class-name">String</span> query <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;param1=%s&amp;param2=%s&quot;</span><span class="token punctuation">,</span> 
     <span class="token class-name">URLEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>param1<span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span class="token punctuation">,</span> 
     <span class="token class-name">URLEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>param2<span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),r={href:"http://docs.oracle.com/javase/6/docs/api/java/net/URLEncoder.html",target:"_blank",rel:"noopener noreferrer"},k={href:"http://en.wikipedia.org/wiki/Percent-encoding",target:"_blank",rel:"noopener noreferrer"},d=s("p",null,"上面例子还用到了String#format()。字符拼接方式，看个人喜好，我更喜欢用这个方式。",-1),m={id:"发送一个http-get请求-可选-带上参数",tabindex:"-1"},v=s("a",{class:"header-anchor",href:"#发送一个http-get请求-可选-带上参数","aria-hidden":"true"},"#",-1),h={href:"http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.3",target:"_blank",rel:"noopener noreferrer"},f=e(`<p>这依然是个繁琐的事情。默认的方式如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">URLConnection</span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">&quot;?&quot;</span> <span class="token operator">+</span> query<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
connection<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">&quot;Accept-Charset&quot;</span><span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">InputStream</span> response <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),g={href:"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.2",target:"_blank",rel:"noopener noreferrer"},b={href:"http://docs.oracle.com/javase/6/docs/api/java/net/URL.html#openStream%28%29",target:"_blank",rel:"noopener noreferrer"},_={href:"http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServlet.html",target:"_blank",rel:"noopener noreferrer"},q={href:"http://docs.oracle.com/javaee/6/api/javax/servlet/ServletRequest.html#getParameter%28java.lang.String%29",target:"_blank",rel:"noopener noreferrer"},C={id:"发送一个http-post请求-并带上参数",tabindex:"-1"},w=s("a",{class:"header-anchor",href:"#发送一个http-post请求-并带上参数","aria-hidden":"true"},"#",-1),j={href:"http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.5",target:"_blank",rel:"noopener noreferrer"},y={href:"http://docs.oracle.com/javase/6/docs/api/java/net/URLConnection.html#setDoOutput%28boolean%29",target:"_blank",rel:"noopener noreferrer"},R=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">URLConnection</span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
connection<span class="token punctuation">.</span><span class="token function">setDoOutput</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Triggers POST.</span>
connection<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">&quot;Accept-Charset&quot;</span><span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span class="token punctuation">;</span>
connection<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/x-www-form-urlencoded;charset=&quot;</span> <span class="token operator">+</span> charset<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">OutputStream</span> output <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    output<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>charset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">InputStream</span> response <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提醒：</p><p>当你要提交一个HTML表单时，务必要把<code>&lt;input type=&quot;hidden&quot;</code>,<code>&lt;input type=&quot;submit&quot;&gt;</code>这类元素的值，也以name=value的形式提交，因为，服务端通常也需要这个信息，已确认哪一个按钮触发了这个提交动作。</p>`,3),L={href:"http://docs.oracle.com/javase/6/docs/api/java/net/HttpURLConnection.html",target:"_blank",rel:"noopener noreferrer"},S={href:"http://docs.oracle.com/javase/6/docs/api/java/net/URLConnection.html",target:"_blank",rel:"noopener noreferrer"},x={href:"http://docs.oracle.com/javase/6/docs/api/java/net/HttpURLConnection.html#setRequestMethod%28java.lang.String%29",target:"_blank",rel:"noopener noreferrer"},U=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">HttpURLConnection</span> httpConnection <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpURLConnection</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
httpConnection<span class="token punctuation">.</span><span class="token function">setRequestMethod</span><span class="token punctuation">(</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),T={href:"http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServlet.html",target:"_blank",rel:"noopener noreferrer"},H={href:"http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServlet.html#doPost%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29",target:"_blank",rel:"noopener noreferrer"},P={href:"http://docs.oracle.com/javaee/6/api/javax/servlet/ServletRequest.html#getParameter%28java.lang.String%29",target:"_blank",rel:"noopener noreferrer"},F=s("h3",{id:"触发http请求的发送",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#触发http请求的发送","aria-hidden":"true"},"#"),n(" 触发HTTP请求的发送")],-1),E={href:"http://docs.oracle.com/javase/6/docs/api/java/net/URLConnection.html#connect%28%29",target:"_blank",rel:"noopener noreferrer"},O={href:"http://docs.oracle.com/javase/6/docs/api/java/net/URLConnection.html#getInputStream%28%29",target:"_blank",rel:"noopener noreferrer"},A=s("p",null,"获取HTTP响应信息",-1),I={href:"http://docs.oracle.com/javase/6/docs/api/java/net/HttpURLConnection.html",target:"_blank",rel:"noopener noreferrer"},M=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> status <span class="token operator">=</span> httpConnection<span class="token punctuation">.</span><span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>HTTP 响应头（headers)</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> header <span class="token operator">:</span> connection<span class="token punctuation">.</span><span class="token function">getHeaderFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span> <span class="token operator">+</span> header<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>HTTP响应编码： 当Content-Type中包含charset参数时，说明响应内容是基于charset参数指定的编码。因此，解码响应信息时，也要按照这个编码格式来。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> contentType <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getHeaderField</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> charset <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> param <span class="token operator">:</span> contentType<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>param<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;charset=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        charset <span class="token operator">=</span> param<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;=&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>charset <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token class-name">Buffer</span><span class="token punctuation">.</span><span class="token function">fromedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> line<span class="token punctuation">;</span> <span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// ... System.out.println(line) ?</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// It&#39;s likely binary content, use InputStream/OutputStream.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="session的维护" tabindex="-1"><a class="header-anchor" href="#session的维护" aria-hidden="true">#</a> session的维护</h3>`,6),N={href:"http://docs.oracle.com/javase/8/docs/api/java/net/CookieHandler.html",target:"_blank",rel:"noopener noreferrer"},D={href:"http://docs.oracle.com/javase/6/docs/api/java/net/CookieManager.html",target:"_blank",rel:"noopener noreferrer"},B={href:"http://docs.oracle.com/javase/6/docs/api/java/net/CookiePolicy.html",target:"_blank",rel:"noopener noreferrer"},W={href:"http://docs.oracle.com/javase/6/docs/api/java/net/CookiePolicy.html#ACCEPT_ALL",target:"_blank",rel:"noopener noreferrer"},G=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// First set the default cookie manager.</span>
<span class="token class-name">CookieHandler</span><span class="token punctuation">.</span><span class="token function">setDefault</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CookieManager</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">CookiePolicy</span><span class="token punctuation">.</span><span class="token constant">ACCEPT_ALL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// All the following subsequent URLConnections will use the same cookie manager.</span>
<span class="token class-name">URLConnection</span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，这个方式并非适用于所有场景。如果使用这个方式失败了，你可以尝试自己设置cookie：你需要从响应头中拿到Set-Cookie参数，然后再把cookie设置到接下来的其他请求中。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Gather all cookies on the first request.</span>
<span class="token class-name">URLConnection</span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cookies <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getHeaderFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;Set-Cookie&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>

<span class="token comment">// Then use the same cookies on all subsequent requests.</span>
connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    connection<span class="token punctuation">.</span><span class="token function">addRequestProperty</span><span class="token punctuation">(</span><span class="token string">&quot;Cookie&quot;</span><span class="token punctuation">,</span> cookie<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;;&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的split<a href="0">&quot;;&quot;, 2</a>,作用是去掉一些跟服务端无关的cookie信息（例如expores，path等）。也可用cookie.substring(0, cookie.indexOf(&#39;;&#39;))达到同样的目的</p><h3 id="流的处理" tabindex="-1"><a class="header-anchor" href="#流的处理" aria-hidden="true">#</a> 流的处理</h3>`,5),V={href:"http://docs.oracle.com/javase/6/docs/api/java/net/HttpURLConnection.html",target:"_blank",rel:"noopener noreferrer"},J={href:"http://docs.oracle.com/javase/6/docs/api/java/net/HttpURLConnection.html#setFixedLengthStreamingMode%28int%29",target:"_blank",rel:"noopener noreferrer"},K=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>httpConnection<span class="token punctuation">.</span><span class="token function">setFixedLengthStreamingMode</span><span class="token punctuation">(</span>contentLength<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),z={href:"http://docs.oracle.com/javase/6/docs/api/java/net/HttpURLConnection.html#setChunkedStreamingMode%28int%29",target:"_blank",rel:"noopener noreferrer"},Y=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>httpConnection<span class="token punctuation">.</span><span class="token function">setChunkedStreamingMode</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="user-agent" tabindex="-1"><a class="header-anchor" href="#user-agent" aria-hidden="true">#</a> User-Agent</h3><p>有时候，你发送的请求，可能只有在浏览器下才能正常返回，而其他方式却不行。这可能跟请求头中的User-Agent有关。通过URLConnection发送的请求，默认会带上的User-Agent信息是Java/1.6.0_19,也就是java+jre的版本。你可以重写这个信息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>connection<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">&quot;User-Agent&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.3) Gecko/20100401&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Do as if you&#39;re using Firefox 3.6.3.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4),Z={href:"http://www.useragentstring.com/pages/useragentstring.php",target:"_blank",rel:"noopener noreferrer"},$=e(`<h3 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理" aria-hidden="true">#</a> 错误处理</h3><p>如果HTTP的响应码是4xx(客户端异常）或者5xx(服务端异常），你可以通过HttpURLConnection#getErrorStream()获取信息，服务端可能会将一些有用的错误信息放到这里面。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">InputStream</span> error <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpURLConnection</span><span class="token punctuation">)</span> connection<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getErrorStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="上传文件" tabindex="-1"><a class="header-anchor" href="#上传文件" aria-hidden="true">#</a> 上传文件</h3>`,4),Q={href:"http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.2",target:"_blank",rel:"noopener noreferrer"},X={href:"http://www.faqs.org/rfcs/rfc2388.html",target:"_blank",rel:"noopener noreferrer"},nn=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> param <span class="token operator">=</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">File</span> textFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;/path/to/file.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">File</span> binaryFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;/path/to/file.bin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> boundary <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Just generate some unique random value.</span>
<span class="token class-name">String</span> <span class="token constant">CRLF</span> <span class="token operator">=</span> <span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">;</span> <span class="token comment">// Line separator required by multipart/form-data.</span>
<span class="token class-name">URLConnection</span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
connection<span class="token punctuation">.</span><span class="token function">setDoOutput</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
connection<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;multipart/form-data; boundary=&quot;</span> <span class="token operator">+</span> boundary<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">try</span> <span class="token punctuation">(</span>
    <span class="token class-name">OutputStream</span> output <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Send normal param.</span>
    writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;--&quot;</span> <span class="token operator">+</span> boundary<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token constant">CRLF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Disposition: form-data; name=\\&quot;param\\&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token constant">CRLF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type: text/plain; charset=&quot;</span> <span class="token operator">+</span> charset<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token constant">CRLF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token constant">CRLF</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token constant">CRLF</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Send text file.</span>
    writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;--&quot;</span> <span class="token operator">+</span> boundary<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token constant">CRLF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Disposition: form-data; name=\\&quot;textFile\\&quot;; filename=\\&quot;&quot;</span> <span class="token operator">+</span> textFile<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token constant">CRLF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type: text/plain; charset=&quot;</span> <span class="token operator">+</span> charset<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token constant">CRLF</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Text file itself must be saved in this charset!</span>
    writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token constant">CRLF</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>textFile<span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>
    output<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Important before continuing with writer!</span>
    writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token constant">CRLF</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// CRLF is important! It indicates end of boundary.</span>

    <span class="token comment">// Send binary file.</span>
    writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;--&quot;</span> <span class="token operator">+</span> boundary<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token constant">CRLF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Disposition: form-data; name=\\&quot;binaryFile\\&quot;; filename=\\&quot;&quot;</span> <span class="token operator">+</span> binaryFile<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token constant">CRLF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type: &quot;</span> <span class="token operator">+</span> <span class="token class-name">URLConnection</span><span class="token punctuation">.</span><span class="token function">guessContentTypeFromName</span><span class="token punctuation">(</span>binaryFile<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token constant">CRLF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Transfer-Encoding: binary&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token constant">CRLF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token constant">CRLF</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>binaryFile<span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>
    output<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Important before continuing with writer!</span>
    writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token constant">CRLF</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// CRLF is important! It indicates end of boundary.</span>

    <span class="token comment">// End of multipart/form-data.</span>
    writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;--&quot;</span> <span class="token operator">+</span> boundary <span class="token operator">+</span> <span class="token string">&quot;--&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token constant">CRLF</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),sn={href:"http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServlet.html",target:"_blank",rel:"noopener noreferrer"},an={href:"http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html#getPart%28java.lang.String%29",target:"_blank",rel:"noopener noreferrer"},tn={href:"http://commons.apache.org/fileupload",target:"_blank",rel:"noopener noreferrer"},en={href:"http://stackoverflow.com/questions/2422468/upload-big-file-to-servlet/2424824#2424824",target:"_blank",rel:"noopener noreferrer"},pn=s("h3",{id:"最后的话",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#最后的话","aria-hidden":"true"},"#"),n(" 最后的话")],-1),on={href:"http://stackoverflow.com/questions/2422468/upload-big-file-to-servlet/2424824#2424824",target:"_blank",rel:"noopener noreferrer"},cn={href:"http://hc.apache.org/httpcomponents-client-ga/tutorial/html/",target:"_blank",rel:"noopener noreferrer"},ln={href:"http://hc.apache.org/httpcomponents-client-ga/examples.html",target:"_blank",rel:"noopener noreferrer"},un={href:"https://code.google.com/p/google-http-java-client/",target:"_blank",rel:"noopener noreferrer"},rn={href:"http://jsoup.org/",target:"_blank",rel:"noopener noreferrer"},kn={href:"http://stackoverflow.com/questions/3152138/what-are-the-pros-and-cons-of-the-leading-java-html-parsers/3154281#3154281",target:"_blank",rel:"noopener noreferrer"},dn={href:"http://stackoverflow.com/questions/2835505/how-to-scan-a-website-or-page-for-info-and-bring-it-into-my-program/2835555#2835555",target:"_blank",rel:"noopener noreferrer"},mn={href:"http://stackoverflow.com/questions/2793150/using-java-net-urlconnection-to-fire-and-handle-http-requests",target:"_blank",rel:"noopener noreferrer"};function vn(hn,fn){const a=l("ExternalLinkIcon");return o(),c("div",null,[i,s("p",null,[n("url中附带的请求参数，必须是name=value这样的格式，每个参数间用&连接。一般来说，你还得用 "),s("a",r,[n("URLEncoder#encode()"),t(a)]),n("对参数做"),s("a",k,[n("编码"),t(a)])]),d,s("h3",m,[v,n(" 发送一个"),s("a",h,[n("HTTP GET"),t(a)]),n("请求（可选：带上参数）")]),f,s("p",null,[n("url和参数之间，要用？号连接。请求头（header）中的"),s("a",g,[n("Accept-Charset"),t(a)]),n("，用于告诉服务器，你所发送参数的编码。如果你不带送任何参数，也可以不管Accept-Charset。另外如果你无需设置header，也可以用"),s("a",b,[n("URL#openStream()"),t(a)]),n(" 而非openConnection。 不管那种方式，假设服务器端是 "),s("a",_,[n("HttpServlet"),t(a)]),n("，那么你的get请求将会触发它的doGet()方法，它能通过"),s("a",q,[n("HttpServletRequest#getParameter()"),t(a)]),n("获取你传递的参数。")]),s("h3",C,[w,n(" 发送一个"),s("a",j,[n("HTTP POST"),t(a)]),n("请求，并带上参数")]),s("p",null,[n("设置"),s("a",y,[n("URLConnection#setDoOutput()"),t(a)]),n("，等于隐式地将请求方法设为POST。标准的HTTP POST 表单，其Content-Tyep为application/x-www-form-urlencoded，请求的内容放到到body中。也就是如下代码：")]),R,s("p",null,[n("也可以使用"),s("a",L,[n("HttpURLConnection"),t(a)]),n(" 来代替"),s("a",S,[n("URLConnection"),t(a)]),n(" ，然后调用"),s("a",x,[n("HttpURLConnection#setRequestMethod()"),t(a)]),n("来将请求设为POST类型。")]),U,s("p",null,[n("同样的，如果服务端是"),s("a",T,[n("HttpServlet"),t(a)]),n(",将会触发它的"),s("a",H,[n("doPost()"),t(a)]),n("方法,可以通过"),s("a",P,[n("HttpServletRequest#getParameter()"),t(a)]),n("获取post参数")]),F,s("p",null,[n("你可以显式地通过"),s("a",E,[n("URLConnection#connect()"),t(a)]),n("来发送请求，但是，当你调用获取响应信息的方法时，一样将自动发送请求。例如当你使用"),s("a",O,[n("URLConnection#getInputStream()"),t(a)]),n("时，就会自动触发请求，因此，connect()方法往往都是多余的。上面我的例子，也都是直接调用getInputStream()方法。")]),A,s("ol",null,[s("li",null,[n("HTTP响应码： 首先默认你使用了 "),s("a",I,[n("HttpURLConnection"),t(a)])])]),M,s("p",null,[n("服务端session，通常是基于cookie实现的。你可以通过"),s("a",N,[n("CookieHandlerAPI"),t(a)]),n("来管理cookie。在发送HTTP请求前，初始化一个"),s("a",D,[n("CookieManager"),t(a)]),n("， 然后设置参数为"),s("a",B,[n("CookiePolicy"),t(a)]),n("."),s("a",W,[n("CCEPT_ALL"),t(a)]),n("。")]),G,s("p",null,[n('不管你是否通过connection.setRequestProperty("Content-Length", contentLength)方法，为content设置了定长， '),s("a",V,[n("HttpURLConnection"),t(a)]),n("在发送请求前，默认都会缓存整个请求的body。如果发送一个比较大的post请求（例如上传文件），有可能会导致OutOfMemoryException。为了避免这个问题，可以设置"),s("a",J,[n("HttpURLConnection#setFixedLengthStreamingMode()"),t(a)])]),K,s("p",null,[n("但如果content长度是未知的，则可以用"),s("a",z,[n("HttpURLConnection#setChunkedStreamingMode()"),t(a)]),n("。这样，header中Transfer-Encoding会变成chunked，你的请求将会分块发送，例如下面的例子，请求的body，将会按1KB一块，分块发送")]),Y,s("p",null,[n("这里有一份更全的浏览器"),s("a",Z,[n("User-Agent清单"),t(a)])]),$,s("p",null,[n("一般来说，你需要将post的内容设为"),s("a",Q,[n("multipart/form-data"),t(a)]),n("(相关的RFC文档："),s("a",X,[n("RFC2388"),t(a)]),n(")")]),nn,s("p",null,[n("假设服务端还是一个"),s("a",sn,[n("HttpServlet"),t(a)]),n(",它的doPost()方法将会处理这个请求，服务端通过"),s("a",an,[n("HttpServletRequest#getPart()"),t(a)]),n("获取你发送的内容（注意了，不是getParameter()）。getPart()是个比较新的方法，是在Servlet 3.0后才引入的。如果你是Servlet 3.0之前的版本，则可以选用[Apache Commons FileUpload]("),s("a",tn,[n("http://commons.apache.org/fileupload"),t(a)]),n("]来解析multipart/form-data的请求。可以参考这里的"),s("a",en,[n("例子"),t(a)])]),pn,s("p",null,[n("上面啰嗦了很多，Apache提供了工具包，帮助我们更方便地完成这些事情 "),s("a",on,[n("Apache HttpComponents HttpClient"),t(a)]),n("：")]),s("ul",null,[s("li",null,[s("a",cn,[n("HttpClient Tutorial"),t(a)])]),s("li",null,[s("a",ln,[n("HttpClient Examples"),t(a)])])]),s("p",null,[n("google也有类似的"),s("a",un,[n("工具包"),t(a)])]),s("p",null,[n("解析、提取HTML内容 如果你是想解析提取html的内容，你可以用"),s("a",rn,[n("Jsoup"),t(a)]),n("等解析器")]),s("ul",null,[s("li",null,[s("a",kn,[n("一些比较有名的HTML解析器的优缺点"),t(a)])]),s("li",null,[s("a",dn,[n("用java如何扫描和解析网页"),t(a)])])]),s("p",null,[n("stackoverflow原址： "),s("a",mn,[n("http://stackoverflow.com/questions/2793150/using-java-net-urlconnection-to-fire-and-handle-http-requests"),t(a)])])])}const bn=p(u,[["render",vn],["__file","using-java-net-urlconnection-to-fire-and-handle-http-requests.html.vue"]]);export{bn as default};

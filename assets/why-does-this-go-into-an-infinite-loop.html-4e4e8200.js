import{_ as e,Y as p,Z as t,a1 as n,a2 as s,a0 as o,$ as c,G as l}from"./framework-ae46ee38.js";const i={},u=c(`<h1 id="这段代码为什么陷入了死循环" tabindex="-1"><a class="header-anchor" href="#这段代码为什么陷入了死循环" aria-hidden="true">#</a> 这段代码为什么陷入了死循环</h1><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h2><p>我写了这样一段代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tests</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            x <span class="token operator">=</span> x<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们知道他应该只写x++或者x=x+1就行了，但是x=x++的情况下，x应该先赋值给自己，然后再增加1。为什么X的值一直是0呢？</p><p>--更新 下面是字节码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tests</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span><span class="token punctuation">{</span>
<span class="token keyword">public</span> <span class="token class-name">Tests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Code</span><span class="token operator">:</span>
   <span class="token number">0</span><span class="token operator">:</span>   aload_0
   <span class="token number">1</span><span class="token operator">:</span>   invokespecial   #<span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
   <span class="token number">4</span><span class="token operator">:</span>   <span class="token keyword">return</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Exception</span><span class="token punctuation">;</span>
  <span class="token class-name">Code</span><span class="token operator">:</span>
   <span class="token number">0</span><span class="token operator">:</span>   iconst_0
   <span class="token number">1</span><span class="token operator">:</span>   istore_1
   <span class="token number">2</span><span class="token operator">:</span>   iload_1
   <span class="token number">3</span><span class="token operator">:</span>   iconst_3
   <span class="token number">4</span><span class="token operator">:</span>   if_icmpge   <span class="token number">22</span>
   <span class="token number">7</span><span class="token operator">:</span>   iload_1
   <span class="token number">8</span><span class="token operator">:</span>   iinc    <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>
   <span class="token number">11</span><span class="token operator">:</span>  istore_1
   <span class="token number">12</span><span class="token operator">:</span>  getstatic   #<span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//Field java/lang/System.out:Ljava/io/PrintStream;</span>
   <span class="token number">15</span><span class="token operator">:</span>  iload_1
   <span class="token number">16</span><span class="token operator">:</span>  invokevirtual   #<span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">//Method java/io/PrintStream.println:(I)V</span>
   <span class="token number">19</span><span class="token operator">:</span>  <span class="token keyword">goto</span>    <span class="token number">2</span>
   <span class="token number">22</span><span class="token operator">:</span>  <span class="token keyword">return</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="回答" tabindex="-1"><a class="header-anchor" href="#回答" aria-hidden="true">#</a> 回答</h3><p>一开始我用C#代码来解释,因为C#允许用&quot;ref&quot;关键字来实现int参数的引用传递,所以我决定用我google到的MutableInt类写的标准的java代码来模拟C#中ref关键字作用.我不知道这对我的解答是不是有帮助，我并不是一个专业的java开发者，我知道还有很多更符合语言习惯的方法去解释这个问题。 也许我写一个函数来模拟x++的作用会解释得更清楚</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">MutableInt</span> <span class="token function">postIncrement</span><span class="token punctuation">(</span><span class="token class-name">MutableInt</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> valueBeforeIncrement <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    x<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MutableInt</span><span class="token punctuation">(</span>valueBeforeIncrement<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对不对？将传递的参数值加1然后返回原值，这就是后增操作符的定义。 现在让我们看看在你的代码中是怎么执行的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MutableInt</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutableInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
x <span class="token operator">=</span> <span class="token function">postIncrement</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>postIncrement(x)</code>函数做了什么？x增加1，对，然后返回x加1之前的值，并且把该返回值赋给x。所以X被赋值的顺序是0，1，0。如果我们重写上面的代码会理解得更清楚。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MutableInt</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutableInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// x is 0.</span>
<span class="token class-name">MutableInt</span> temp <span class="token operator">=</span> <span class="token function">postIncrement</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Now x is 1, and temp is 0.</span>
x <span class="token operator">=</span> temp<span class="token punctuation">;</span>                           <span class="token comment">// Now x is 0 again.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你定势地认为，将左边的X换个名称为y，&quot;你能看到x先自增1，然后赋值给了y&quot;，这一时也让我有点困惑。bi那个不是x被赋值给y，而是x（自增）之前的值被赋给y.事实上，把左边x变量名改成y结果也没什么不同。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MutableInt</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutableInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// x is 0.</span>
<span class="token class-name">MutableInt</span> y <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutableInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// y is 0.</span>
<span class="token class-name">MutableInt</span> temp <span class="token operator">=</span> <span class="token function">postIncrement</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Now x is 1, and temp is 0.</span>
y <span class="token operator">=</span> temp<span class="token punctuation">;</span>                           <span class="token comment">// y is still 0.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见，x=x++并没有改变x的值，只是让x依次被赋值为x0,x0+1,x0。</p><p>更新：你可能会怀疑在自增过程中x并没有被赋值为1，下面通过一个demo来解释确实x存在赋值为1的过程。 demo中调用了x=x++；同时另外开了一个单独的线程不断输出x的值.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">LoopingThread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoopingThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Starting background thread...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            x <span class="token operator">=</span> x<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">LoopingThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Main</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是程序的部分输出，0和1不规则的出现。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Starting background thread...
0
0
1
1
0
0
0
0
0
0
0
0
0
0
1
0
1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),r={href:"http://stackoverflow.com/questions/3831341/why-does-this-go-into-an-infinite-loop",target:"_blank",rel:"noopener noreferrer"};function d(k,v){const a=l("ExternalLinkIcon");return p(),t("div",null,[u,n("p",null,[s("stackoverflow链接： "),n("a",r,[s("http://stackoverflow.com/questions/3831341/why-does-this-go-into-an-infinite-loop"),o(a)])])])}const b=e(i,[["render",d],["__file","why-does-this-go-into-an-infinite-loop.html.vue"]]);export{b as default};

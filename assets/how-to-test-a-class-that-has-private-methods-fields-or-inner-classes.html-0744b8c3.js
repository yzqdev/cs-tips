import{_ as a,Y as i,Z as l,a1 as t,a2 as e,a0 as r,$ as d,G as o}from"./framework-ae46ee38.js";const n={},c=t("h1",{id:"如何测试-private-方法-变量或者内部类",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#如何测试-private-方法-变量或者内部类","aria-hidden":"true"},"#"),e(" 如何测试 private 方法，变量或者内部类")],-1),h={href:"https://en.wikipedia.org/wiki/Reflection_%28computer_programming%29",target:"_blank",rel:"noopener noreferrer"},m=d(`<p>实际测试时，可以通过一些反射辅助类，设置和获取私有(静态)的变量、调用私有(静态)方法。遵循下面的窍门，你可以很好地处理私有方法和变量的测试。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Method method = targetClass.getDeclaredMethod(methodName, argClasses);
method.setAccessible(true);
return method.invoke(targetObject, argObjects);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>私有变量:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Field field = targetClass.getDeclaredField(fieldName);
field.setAccessible(true);
field.set(object, value);

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>note：</p><ol><li><code>targetClass.getDeclaredMethod(methodName, argClasses)</code>这个方法能让你获取到私有方法。<code>getDeclaredField</code>让你获取到私有变量</li><li>在对私有变量（方法）进行处理前，需要先<code>setAccessible(true)</code></li></ol></blockquote><p>stackoverflow原址：http://stackoverflow.com/questions/34571/how-to-test-a-class-that-has-private-methods-fields-or-inner-classes</p>`,6);function v(u,p){const s=o("ExternalLinkIcon");return i(),l("div",null,[c,t("p",null,[e("当你需要测试一个遗留的应用程序，且不能更改方法的可见性时，那么，测试私有方法/属性的最好方式就是使用"),t("a",h,[e("反射"),r(s)]),e("。")]),m])}const _=a(n,[["render",v],["__file","how-to-test-a-class-that-has-private-methods-fields-or-inner-classes.html.vue"]]);export{_ as default};

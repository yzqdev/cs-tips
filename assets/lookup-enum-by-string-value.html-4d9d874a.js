import{_ as p,Y as o,Z as c,a1 as n,a2 as s,a0 as e,$ as t,G as l}from"./framework-ae46ee38.js";const i={},u=t(`<h1 id="java-中如何将-string-转换为-enum" tabindex="-1"><a class="header-anchor" href="#java-中如何将-string-转换为-enum" aria-hidden="true">#</a> Java 中如何将 String 转换为 enum</h1><h3 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h3><p>enum 类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Blah</span> <span class="token punctuation">{</span>
    <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">,</span> <span class="token class-name">D</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如何根据枚举类型的值(比如 &quot;A&quot; ) 得到 <code>Blah.A</code>?</p><hr><h3 id="a1" tabindex="-1"><a class="header-anchor" href="#a1" aria-hidden="true">#</a> A1</h3><p>是的, <code>Blah.valueOf(&quot;A&quot;)</code> 将会给你 <code>Blah.A</code>.</p>`,8),r=n("code",null,"valueof()",-1),d=n("code",null,"values()",-1),k={href:"http://docs.oracle.com/javase/7/docs/api/java/awt/Dialog.ModalityType.html",title:"Dialog.ModalityType",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"Dialog.ModalityType",-1),v=t(`<h3 id="a2" tabindex="-1"><a class="header-anchor" href="#a2" aria-hidden="true">#</a> A2</h3><p>另一个解答,如果文本和 <code>enumeration</code> 值不一致</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Blah</span> <span class="token punctuation">{</span>
  <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token string">&quot;text1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token string">&quot;text2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token string">&quot;text3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token class-name">D</span><span class="token punctuation">(</span><span class="token string">&quot;text4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">private</span> <span class="token class-name">String</span> text<span class="token punctuation">;</span>

  <span class="token class-name">Blah</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Blah</span> <span class="token function">fromString</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>text <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Blah</span> b <span class="token operator">:</span> <span class="token class-name">Blah</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> b<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>评论区在讨论是应该返回null还是抛出异常,个人认为视具体情况,允许转换失败就返回null,不允许就抛出异常,或许创建一个特殊的空对象是个好的选择 -译者注</em></p><h3 id="a3" tabindex="-1"><a class="header-anchor" href="#a3" aria-hidden="true">#</a> A3</h3><p>这是我使用的一个工具类:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 一个对于所有Enum类通用的方法，因为他们不能有另一个基类
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> Enum type
 * <span class="token keyword">@param</span> <span class="token parameter">c</span> enum type. All enums must be all caps.
 * <span class="token keyword">@param</span> <span class="token parameter">string</span> case insensitive
 * <span class="token keyword">@return</span> corresponding enum, or null
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getEnumFromString</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">,</span> <span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> c <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> string <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Enum</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> string<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后,在我的enum类中通常如此使用来减少代码量:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">MyEnum</span> <span class="token function">fromString</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">getEnumFromString</span><span class="token punctuation">(</span><span class="token class-name">MyEnum</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果的enums不是全部大写,只需要修改 <code>Enum.valueOf</code> 这一行。 很遗憾，我不能使用 <code>T.class</code> 传给 <code>Enum.valueOf</code>,因为 <code>T</code>会被擦出。</p><p><em>评论区对于答主的异常处理一片指责 -译者注</em></p><h3 id="a4" tabindex="-1"><a class="header-anchor" href="#a4" aria-hidden="true">#</a> A4</h3>`,12),b={href:"https://github.com/google/guava",target:"_blank",rel:"noopener noreferrer"},g=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Enums</span><span class="token punctuation">.</span><span class="token function">getIfPresent</span><span class="token punctuation">(</span><span class="token class-name">Blah</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它让你检查是否 <code>Blan</code>中存在 <code>A</code>并且不抛出异常</p><p><em>完整方法签名 <code>Optional&lt;T&gt; getIfPresent(Class&lt;T&gt; enumClass, String value)</code> , <code>Optional</code> 对象可以优雅的解决null值问题 -译者注</em></p><blockquote><p>注意: 返回的是 <code>Google Optional</code> 而不是 <code>Java Optional</code></p></blockquote><hr>`,5),h=n("em",null,"其他的答案都大同小异,感兴趣的可以看原帖",-1),y={href:"https://stackoverflow.com/questions/604424/lookup-enum-by-string-value",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/DaiDongLiang",target:"_blank",rel:"noopener noreferrer"};function w(_,x){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("静态方法 "),r,s(" 和 "),d,s(" 在编译时期被插入,并不存在于源码中。 但是在Javadoc中会显示;例如,"),n("a",k,[m,e(a)]),s("中显示了这两个方法。")]),v,n("p",null,[s("如果你不想编写自己的工具类,可以使用 Google的 "),n("a",b,[s("Google guava"),e(a)]),s(" 库:")]),g,n("p",null,[h,s(" stackoverflow链接 "),n("a",y,[s("Lookup enum by string value "),e(a)]),n("em",null,[s("译者:"),n("a",f,[s("MagicWolf"),e(a)])])])])}const q=p(i,[["render",w],["__file","lookup-enum-by-string-value.html.vue"]]);export{q as default};
